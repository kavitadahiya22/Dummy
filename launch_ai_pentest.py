#!/usr/bin/env python3
"""
AI-Powered Penetration Testing Suite Launcher
Complete Docker environment with OpenAI + DeepSeek integration
"""

import os
import sys
import time
import subprocess
import requests
import json
from pathlib import Path

def print_banner():
    """Print the application banner"""
    print("ü§ñ AI-POWERED PENETRATION TESTING SUITE")
    print("üéØ OpenAI + DeepSeek Intelligence Integration")
    print("üìä Real-time OpenSearch Dashboard Visualization")
    print("üê≥ Complete Docker Environment")
    print("=" * 70)

def check_api_keys():
    """Check for AI API keys and provide setup instructions"""
    openai_key = os.getenv('OPENAI_API_KEY')
    deepseek_key = os.getenv('DEEPSEEK_API_KEY')
    
    print("\nüîë AI API Keys Configuration:")
    
    if openai_key:
        print("‚úÖ OpenAI API Key: Configured")
    else:
        print("‚ö†Ô∏è OpenAI API Key: Not configured")
        print("   Set with: export OPENAI_API_KEY='your-openai-key'")
    
    if deepseek_key:
        print("‚úÖ DeepSeek API Key: Configured")
    else:
        print("‚ö†Ô∏è DeepSeek API Key: Not configured")
        print("   Set with: export DEEPSEEK_API_KEY='your-deepseek-key'")
    
    if not openai_key and not deepseek_key:
        print("\nüìù Note: Without API keys, the system will use fallback analysis.")
        print("   You can still run comprehensive penetration testing!")
    
    return openai_key, deepseek_key

def create_ai_environment_file(openai_key=None, deepseek_key=None):
    """Create .env file for Docker with AI configuration"""
    env_content = f"""# AI-Powered Penetration Testing Environment Configuration

# Target Configuration
TARGET_URL=http://juice-shop:3000

# OpenSearch Configuration
OPENSEARCH_URL=http://opensearch:9200
OPENSEARCH_DASHBOARD_URL=http://opensearch-dashboards:5601

# AI API Keys
OPENAI_API_KEY={openai_key or ''}
DEEPSEEK_API_KEY={deepseek_key or ''}

# Output Configuration
PENTEST_OUTPUT_DIR=/app/results
REPORTS_DIR=/app/reports

# AI Configuration
AI_ENHANCED=true
AI_MODEL_PREFERENCE=deepseek
AI_ANALYSIS_DEPTH=comprehensive

# Docker Configuration
DOCKER_CONTAINER=true
"""
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("‚úÖ AI environment configuration created (.env)")

def update_docker_compose_for_ai():
    """Update docker-compose.yml for AI integration"""
    ai_compose_content = """version: '3.8'

services:
  # OWASP Juice Shop target application
  juice-shop:
    image: bkimminich/juice-shop
    container_name: juice-shop-target
    ports:
      - "3000:3000"
    networks:
      - pentest-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # OpenSearch - Search and Analytics Engine
  opensearch:
    image: opensearchproject/opensearch:2.11.1
    container_name: opensearch
    environment:
      - cluster.name=ai-pentest-cluster
      - node.name=opensearch
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms1g -Xmx1g"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data:/usr/share/opensearch/data
    ports:
      - "9200:9200"
      - "9600:9600"
    networks:
      - pentest-network
    restart: unless-stopped

  # OpenSearch Dashboards - AI Visualization Dashboard
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.11.1
    container_name: opensearch-dashboards
    ports:
      - "5601:5601"
    environment:
      - 'OPENSEARCH_HOSTS=["http://opensearch:9200"]'
      - "DISABLE_SECURITY_DASHBOARDS_PLUGIN=true"
    depends_on:
      - opensearch
    networks:
      - pentest-network
    restart: unless-stopped

  # AI-Powered Penetration Testing Suite
  ai-pentest-suite:
    build: 
      context: .
      dockerfile: Dockerfile.ai
    container_name: ai-pentest-automation
    volumes:
      - ./results:/app/results
      - ./reports:/app/reports
      - ./logs:/app/logs
    networks:
      - pentest-network
    depends_on:
      - juice-shop
      - opensearch
      - opensearch-dashboards
    environment:
      - TARGET_URL=http://juice-shop:3000
      - OPENSEARCH_URL=http://opensearch:9200
      - OPENSEARCH_DASHBOARD_URL=http://opensearch-dashboards:5601
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - AI_ENHANCED=true
      - PENTEST_OUTPUT_DIR=/app/results
    command: ["python", "ai_pentest_orchestrator.py", "http://juice-shop:3000"]
    stdin_open: true
    tty: true

networks:
  pentest-network:
    driver: bridge

volumes:
  opensearch-data:
    driver: local"""
    
    with open('docker-compose-ai.yml', 'w') as f:
        f.write(ai_compose_content)
    
    print("‚úÖ AI-enhanced Docker Compose configuration created")

def create_ai_dockerfile():
    """Create specialized Dockerfile for AI integration"""
    dockerfile_content = """# AI-Enhanced Penetration Testing Suite
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \\
    curl \\
    wget \\
    git \\
    nmap \\
    nikto \\
    hydra \\
    sqlmap \\
    dnsutils \\
    net-tools \\
    iputils-ping \\
    build-essential \\
    && rm -rf /var/lib/apt/lists/*

# Copy AI requirements
COPY requirements_ai.txt .

# Install AI-enhanced Python dependencies
RUN pip install --no-cache-dir -r requirements_ai.txt

# Copy all scripts and tools
COPY *.py ./
COPY tools/ ./tools/

# Create directories
RUN mkdir -p /app/results /app/reports /app/logs

# Set environment variables
ENV PYTHONPATH=/app
ENV PENTEST_OUTPUT_DIR=/app/results
ENV AI_ENHANCED=true

# Create non-root user
RUN useradd -m -u 1000 ai-pentester && \\
    chown -R ai-pentester:ai-pentester /app
USER ai-pentester

# Expose ports
EXPOSE 8080

# Default command
CMD ["python", "ai_pentest_orchestrator.py"]"""
    
    with open('Dockerfile.ai', 'w') as f:
        f.write(dockerfile_content)
    
    print("‚úÖ AI-enhanced Dockerfile created")

def run_command(command, description, check=True):
    """Run a command with error handling"""
    print(f"üîß {description}")
    try:
        result = subprocess.run(command, shell=True, check=check, 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} completed")
            return True
        else:
            print(f"‚ùå {description} failed: {result.stderr}")
            return False
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} failed: {e}")
        return False

def wait_for_service(url, name, timeout=300):
    """Wait for a service to be ready"""
    print(f"‚è≥ Waiting for {name} at {url}")
    start_time = time.time()
    
    while time.time() - start_time < timeout:
        try:
            response = requests.get(url, timeout=5)
            if response.status_code < 500:
                print(f"‚úÖ {name} is ready")
                return True
        except requests.exceptions.RequestException:
            pass
        time.sleep(5)
    
    print(f"‚ö†Ô∏è {name} not ready after {timeout}s")
    return False

def setup_ai_pentest_environment():
    """Setup the complete AI-powered penetration testing environment"""
    print_banner()
    
    # Check prerequisites
    if not run_command("docker --version", "Checking Docker availability", check=False):
        print("‚ùå Docker is required but not available")
        return False
    
    if not run_command("docker-compose --version", "Checking Docker Compose availability", check=False):
        print("‚ùå Docker Compose is required but not available")
        return False
    
    # Check and configure AI API keys
    openai_key, deepseek_key = check_api_keys()
    
    # Create AI configuration files
    print("\nüìÅ Creating AI configuration files...")
    create_ai_environment_file(openai_key, deepseek_key)
    update_docker_compose_for_ai()
    create_ai_dockerfile()
    
    # Install local AI dependencies
    print("\nüì¶ Installing AI dependencies...")
    if Path("requirements_ai.txt").exists():
        run_command(f"{sys.executable} -m pip install -r requirements_ai.txt", 
                   "Installing AI Python packages", check=False)
    
    # Build and start AI-enhanced environment
    print("\nüê≥ Building and starting AI-enhanced environment...")
    
    # Stop any existing containers
    run_command("docker-compose -f docker-compose-ai.yml down", 
               "Stopping existing containers", check=False)
    
    # Build AI-enhanced images
    if not run_command("docker-compose -f docker-compose-ai.yml build", 
                      "Building AI-enhanced containers"):
        print("‚ùå Failed to build containers")
        return False
    
    # Start the environment
    if not run_command("docker-compose -f docker-compose-ai.yml up -d", 
                      "Starting AI-enhanced environment"):
        print("‚ùå Failed to start environment")
        return False
    
    # Wait for services
    print("\n‚è≥ Waiting for services to be ready...")
    services = [
        ("http://localhost:3000", "OWASP Juice Shop"),
        ("http://localhost:9200", "OpenSearch"),
        ("http://localhost:5601", "OpenSearch Dashboards")
    ]
    
    all_ready = True
    for url, name in services:
        if not wait_for_service(url, name):
            all_ready = False
    
    return all_ready

def run_ai_pentest():
    """Run the AI-powered penetration test"""
    print("\nü§ñ Starting AI-Powered Penetration Testing...")
    
    # Check if we have API keys for enhanced analysis
    has_openai = bool(os.getenv('OPENAI_API_KEY'))
    has_deepseek = bool(os.getenv('DEEPSEEK_API_KEY'))
    
    if has_openai or has_deepseek:
        print("üéØ AI-Enhanced Mode: Using intelligent tool orchestration")
    else:
        print("üéØ Standard Mode: Comprehensive automated testing")
    
    # Run the AI orchestrator
    target_url = "http://localhost:3000"
    
    cmd_parts = [sys.executable, "ai_pentest_orchestrator.py", target_url]
    
    if has_openai:
        cmd_parts.extend(["--openai-key", os.getenv('OPENAI_API_KEY')])
    
    if has_deepseek:
        cmd_parts.extend(["--deepseek-key", os.getenv('DEEPSEEK_API_KEY')])
    
    try:
        result = subprocess.run(cmd_parts, check=False)
        return result.returncode == 0
    except Exception as e:
        print(f"‚ùå AI pentest execution failed: {e}")
        return False

def print_results_summary():
    """Print final results and access information"""
    print("\nüéâ AI-Powered Penetration Testing Environment Ready!")
    print("=" * 70)
    
    print("üéØ Access Points:")
    print("  ‚Ä¢ Target Application: http://localhost:3000")
    print("  ‚Ä¢ OpenSearch API: http://localhost:9200")
    print("  ‚Ä¢ AI Dashboard: http://localhost:5601/app/dashboards")
    print("  ‚Ä¢ Results Directory: ./results/")
    print("  ‚Ä¢ Reports Directory: ./reports/")
    
    print("\nü§ñ AI Features:")
    print("  ‚Ä¢ Intelligent tool selection and prioritization")
    print("  ‚Ä¢ Real-time vulnerability analysis")
    print("  ‚Ä¢ Risk assessment and remediation guidance")
    print("  ‚Ä¢ Interactive dashboard with AI insights")
    
    print("\nüìä Available Dashboards:")
    print("  ‚Ä¢ AI Pentest Overview: Real-time testing progress")
    print("  ‚Ä¢ AI Security Insights: Vulnerability analysis")
    print("  ‚Ä¢ Risk Assessment Matrix: AI-driven prioritization")
    
    print("\nüîß Management Commands:")
    print("  ‚Ä¢ View logs: docker-compose -f docker-compose-ai.yml logs")
    print("  ‚Ä¢ Stop environment: docker-compose -f docker-compose-ai.yml down")
    print("  ‚Ä¢ Restart services: docker-compose -f docker-compose-ai.yml restart")

def main():
    """Main function"""
    try:
        # Setup environment
        if not setup_ai_pentest_environment():
            print("‚ùå Failed to setup AI pentest environment")
            return 1
        
        # Run AI penetration testing
        print("\n" + "=" * 70)
        success = run_ai_pentest()
        
        # Print results
        print_results_summary()
        
        if success:
            print("\nüéâ AI-Powered Penetration Testing Completed Successfully!")
        else:
            print("\n‚ö†Ô∏è AI Penetration Testing completed with some issues")
        
        print("\nPress Ctrl+C to stop the environment when done.")
        
        # Keep running until interrupted
        try:
            while True:
                time.sleep(10)
        except KeyboardInterrupt:
            print("\nüõë Shutting down AI environment...")
            run_command("docker-compose -f docker-compose-ai.yml down", 
                       "Stopping containers", check=False)
        
        return 0
        
    except KeyboardInterrupt:
        print("\nüõë Interrupted by user")
        run_command("docker-compose -f docker-compose-ai.yml down", 
                   "Stopping containers", check=False)
        return 1
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())
