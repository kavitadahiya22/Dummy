#!/usr/bin/env python3
"""
AI-Enhanced Penetration Testing Setup Script
Installs OpenAI, DeepSeek, and all required AI dependencies
"""

import subprocess
import sys
import os

def install_package(package):
    """Install a Python package using pip"""
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])
        print(f"✅ Successfully installed {package}")
        return True
    except subprocess.CalledProcessError:
        print(f"❌ Failed to install {package}")
        return False

def setup_api_keys():
    """Guide user through API key setup"""
    print("\n🔑 AI API Keys Setup")
    print("=" * 30)
    
    print("\n📝 To enable AI-powered analysis, you need API keys:")
    print("\n1. OpenAI API Key:")
    print("   • Visit: https://platform.openai.com/api-keys")
    print("   • Create account and generate API key")
    print("   • Set with: export OPENAI_API_KEY='your-key-here'")
    
    print("\n2. DeepSeek API Key:")
    print("   • Visit: https://platform.deepseek.com/api-keys")
    print("   • Create account and generate API key") 
    print("   • Set with: export DEEPSEEK_API_KEY='your-key-here'")
    
    print("\n💡 Note: You can run without API keys using fallback analysis")
    
    # Check current environment
    openai_key = os.getenv('OPENAI_API_KEY')
    deepseek_key = os.getenv('DEEPSEEK_API_KEY')
    
    print(f"\n🔍 Current Status:")
    print(f"   OpenAI API Key: {'✅ Set' if openai_key else '❌ Not set'}")
    print(f"   DeepSeek API Key: {'✅ Set' if deepseek_key else '❌ Not set'}")

def main():
    print("🤖 AI-Enhanced Penetration Testing Setup")
    print("🎯 OpenAI + DeepSeek Integration")
    print("=" * 50)
    
    # Core AI packages
    ai_packages = [
        "openai>=1.3.0",           # OpenAI API client
        "transformers>=4.35.0",    # Hugging Face transformers
        "torch>=2.1.0",            # PyTorch for AI models
        "aiohttp>=3.8.0",          # Async HTTP for AI APIs
        "python-dotenv>=1.0.0",    # Environment variables
        "tiktoken>=0.5.0",         # OpenAI tokenizer
        "numpy>=1.24.0",           # Numerical computing
        "pandas>=2.0.0",           # Data manipulation
    ]
    
    # Enhanced reporting packages
    reporting_packages = [
        "reportlab>=4.0.0",        # PDF generation
        "matplotlib>=3.7.0",       # Charts and graphs
        "plotly>=5.15.0",          # Interactive charts
        "jinja2>=3.1.0",           # Template engine
        "weasyprint>=59.0",        # Alternative PDF
        "Pillow>=10.0.0",          # Image processing
    ]
    
    # OpenSearch and monitoring
    opensearch_packages = [
        "opensearch-py>=2.3.0",    # OpenSearch client
        "requests>=2.31.0",        # HTTP requests
        "urllib3>=2.0.0",          # HTTP library
    ]
    
    # Security and penetration testing
    security_packages = [
        "python-nmap>=0.7.1",      # Nmap Python wrapper
        "beautifulsoup4>=4.12.0",  # HTML parsing
        "lxml>=4.9.0",             # XML parsing
        "pyyaml>=6.0.0",           # YAML parsing
        "python-dateutil>=2.8.0",  # Date utilities
        "pytz>=2023.3",            # Timezone handling
    ]
    
    all_packages = ai_packages + reporting_packages + opensearch_packages + security_packages
    
    print(f"📦 Installing {len(all_packages)} AI-enhanced packages...")
    print("\nThis may take several minutes due to AI model dependencies...")
    
    success_count = 0
    failed_packages = []
    
    for package in all_packages:
        print(f"\nInstalling {package}...")
        if install_package(package):
            success_count += 1
        else:
            failed_packages.append(package)
    
    print(f"\n📊 Installation Summary:")
    print(f"✅ Successfully installed: {success_count}/{len(all_packages)} packages")
    
    if failed_packages:
        print(f"❌ Failed packages: {len(failed_packages)}")
        for pkg in failed_packages:
            print(f"   • {pkg}")
        print("\n💡 You can manually install failed packages with: pip install <package>")
    
    if success_count >= len(all_packages) * 0.8:  # 80% success rate
        print("\n🎉 AI-Enhanced Penetration Testing Suite Setup Complete!")
        
        print("\n🚀 Features Enabled:")
        print("  ✅ OpenAI GPT Integration")
        print("  ✅ DeepSeek AI Analysis") 
        print("  ✅ Intelligent Tool Orchestration")
        print("  ✅ AI-Powered Vulnerability Assessment")
        print("  ✅ Advanced PDF Reports with Charts")
        print("  ✅ Real-time OpenSearch Dashboards")
        print("  ✅ Automated Risk Prioritization")
        
        # API Key setup guidance
        setup_api_keys()
        
        print("\n🎯 Next Steps:")
        print("  1. Set up your AI API keys (see above)")
        print("  2. Run: python launch_ai_pentest.py")
        print("  3. Access dashboard at: http://localhost:5601")
        print("  4. View AI-enhanced reports in ./reports/")
        
        print("\n🔧 Quick Start Commands:")
        print("  • Full AI setup: python launch_ai_pentest.py")
        print("  • Manual testing: python ai_pentest_orchestrator.py <target>")
        print("  • Docker only: docker-compose -f docker-compose-ai.yml up")
        
    else:
        print("\n⚠️ Setup completed with issues.")
        print("Some packages failed to install. The suite may have limited functionality.")
        print("Please review the failed packages and install manually if needed.")
    
    print(f"\n📝 Full requirements saved to: requirements_ai.txt")
    print("You can reinstall everything with: pip install -r requirements_ai.txt")

if __name__ == "__main__":
    main()
